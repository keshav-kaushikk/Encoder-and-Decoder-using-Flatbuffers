// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CLIENTDATA_CLNT_H_
#define FLATBUFFERS_GENERATED_CLIENTDATA_CLNT_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

namespace Clnt {

struct Person;
struct PersonBuilder;

struct Group;
struct GroupBuilder;

struct Client;
struct ClientBuilder;

struct Clients;
struct ClientsBuilder;

enum Client_Type : uint8_t {
  Client_Type_NONE = 0,
  Client_Type_Person = 1,
  Client_Type_Group = 2,
  Client_Type_MIN = Client_Type_NONE,
  Client_Type_MAX = Client_Type_Group
};

inline const Client_Type (&EnumValuesClient_Type())[3] {
  static const Client_Type values[] = {
    Client_Type_NONE,
    Client_Type_Person,
    Client_Type_Group
  };
  return values;
}

inline const char * const *EnumNamesClient_Type() {
  static const char * const names[4] = {
    "NONE",
    "Person",
    "Group",
    nullptr
  };
  return names;
}

inline const char *EnumNameClient_Type(Client_Type e) {
  if (::flatbuffers::IsOutRange(e, Client_Type_NONE, Client_Type_Group)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesClient_Type()[index];
}

template<typename T> struct Client_TypeTraits {
  static const Client_Type enum_value = Client_Type_NONE;
};

template<> struct Client_TypeTraits<Clnt::Person> {
  static const Client_Type enum_value = Client_Type_Person;
};

template<> struct Client_TypeTraits<Clnt::Group> {
  static const Client_Type enum_value = Client_Type_Group;
};

bool VerifyClient_Type(::flatbuffers::Verifier &verifier, const void *obj, Client_Type type);
bool VerifyClient_TypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types);

struct Person FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PersonBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AGE = 4,
    VT_WEIGHT = 6,
    VT_GENDER = 8
  };
  int16_t age() const {
    return GetField<int16_t>(VT_AGE, 0);
  }
  float weight() const {
    return GetField<float>(VT_WEIGHT, 0.0f);
  }
  bool gender() const {
    return GetField<uint8_t>(VT_GENDER, 0) != 0;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_AGE, 2) &&
           VerifyField<float>(verifier, VT_WEIGHT, 4) &&
           VerifyField<uint8_t>(verifier, VT_GENDER, 1) &&
           verifier.EndTable();
  }
};

struct PersonBuilder {
  typedef Person Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_age(int16_t age) {
    fbb_.AddElement<int16_t>(Person::VT_AGE, age, 0);
  }
  void add_weight(float weight) {
    fbb_.AddElement<float>(Person::VT_WEIGHT, weight, 0.0f);
  }
  void add_gender(bool gender) {
    fbb_.AddElement<uint8_t>(Person::VT_GENDER, static_cast<uint8_t>(gender), 0);
  }
  explicit PersonBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Person> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Person>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Person> CreatePerson(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int16_t age = 0,
    float weight = 0.0f,
    bool gender = false) {
  PersonBuilder builder_(_fbb);
  builder_.add_weight(weight);
  builder_.add_age(age);
  builder_.add_gender(gender);
  return builder_.Finish();
}

struct Group FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GroupBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AVG_AGE = 4,
    VT_AVG_WEIGHT = 6,
    VT_PARTICIPANT_NAMELIST = 8
  };
  float avg_age() const {
    return GetField<float>(VT_AVG_AGE, 0.0f);
  }
  float avg_weight() const {
    return GetField<float>(VT_AVG_WEIGHT, 0.0f);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *participant_namelist() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>> *>(VT_PARTICIPANT_NAMELIST);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_AVG_AGE, 4) &&
           VerifyField<float>(verifier, VT_AVG_WEIGHT, 4) &&
           VerifyOffset(verifier, VT_PARTICIPANT_NAMELIST) &&
           verifier.VerifyVector(participant_namelist()) &&
           verifier.VerifyVectorOfStrings(participant_namelist()) &&
           verifier.EndTable();
  }
};

struct GroupBuilder {
  typedef Group Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_avg_age(float avg_age) {
    fbb_.AddElement<float>(Group::VT_AVG_AGE, avg_age, 0.0f);
  }
  void add_avg_weight(float avg_weight) {
    fbb_.AddElement<float>(Group::VT_AVG_WEIGHT, avg_weight, 0.0f);
  }
  void add_participant_namelist(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> participant_namelist) {
    fbb_.AddOffset(Group::VT_PARTICIPANT_NAMELIST, participant_namelist);
  }
  explicit GroupBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Group> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Group>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Group> CreateGroup(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<::flatbuffers::String>>> participant_namelist = 0) {
  GroupBuilder builder_(_fbb);
  builder_.add_participant_namelist(participant_namelist);
  builder_.add_avg_weight(avg_weight);
  builder_.add_avg_age(avg_age);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Group> CreateGroupDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    float avg_age = 0.0f,
    float avg_weight = 0.0f,
    const std::vector<::flatbuffers::Offset<::flatbuffers::String>> *participant_namelist = nullptr) {
  auto participant_namelist__ = participant_namelist ? _fbb.CreateVector<::flatbuffers::Offset<::flatbuffers::String>>(*participant_namelist) : 0;
  return Clnt::CreateGroup(
      _fbb,
      avg_age,
      avg_weight,
      participant_namelist__);
}

struct Client FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TYPE_TYPE = 6,
    VT_TYPE = 8
  };
  const ::flatbuffers::String *name() const {
    return GetPointer<const ::flatbuffers::String *>(VT_NAME);
  }
  bool KeyCompareLessThan(const Client * const o) const {
    return *name() < *o->name();
  }
  int KeyCompareWithValue(const char *_name) const {
    return strcmp(name()->c_str(), _name);
  }
  Clnt::Client_Type type_type() const {
    return static_cast<Clnt::Client_Type>(GetField<uint8_t>(VT_TYPE_TYPE, 0));
  }
  const void *type() const {
    return GetPointer<const void *>(VT_TYPE);
  }
  template<typename T> const T *type_as() const;
  const Clnt::Person *type_as_Person() const {
    return type_type() == Clnt::Client_Type_Person ? static_cast<const Clnt::Person *>(type()) : nullptr;
  }
  const Clnt::Group *type_as_Group() const {
    return type_type() == Clnt::Client_Type_Group ? static_cast<const Clnt::Group *>(type()) : nullptr;
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TYPE_TYPE, 1) &&
           VerifyOffset(verifier, VT_TYPE) &&
           VerifyClient_Type(verifier, type(), type_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Clnt::Person *Client::type_as<Clnt::Person>() const {
  return type_as_Person();
}

template<> inline const Clnt::Group *Client::type_as<Clnt::Group>() const {
  return type_as_Group();
}

struct ClientBuilder {
  typedef Client Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_name(::flatbuffers::Offset<::flatbuffers::String> name) {
    fbb_.AddOffset(Client::VT_NAME, name);
  }
  void add_type_type(Clnt::Client_Type type_type) {
    fbb_.AddElement<uint8_t>(Client::VT_TYPE_TYPE, static_cast<uint8_t>(type_type), 0);
  }
  void add_type(::flatbuffers::Offset<void> type) {
    fbb_.AddOffset(Client::VT_TYPE, type);
  }
  explicit ClientBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Client> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Client>(end);
    fbb_.Required(o, Client::VT_NAME);
    return o;
  }
};

inline ::flatbuffers::Offset<Client> CreateClient(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> name = 0,
    Clnt::Client_Type type_type = Clnt::Client_Type_NONE,
    ::flatbuffers::Offset<void> type = 0) {
  ClientBuilder builder_(_fbb);
  builder_.add_type(type);
  builder_.add_name(name);
  builder_.add_type_type(type_type);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Client> CreateClientDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    Clnt::Client_Type type_type = Clnt::Client_Type_NONE,
    ::flatbuffers::Offset<void> type = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return Clnt::CreateClient(
      _fbb,
      name__,
      type_type,
      type);
}

struct Clients FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef ClientsBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Clnt::Client>> *clients() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Clnt::Client>> *>(VT_CLIENTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENTS) &&
           verifier.VerifyVector(clients()) &&
           verifier.VerifyVectorOfTables(clients()) &&
           verifier.EndTable();
  }
};

struct ClientsBuilder {
  typedef Clients Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_clients(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Clnt::Client>>> clients) {
    fbb_.AddOffset(Clients::VT_CLIENTS, clients);
  }
  explicit ClientsBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Clients> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Clients>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Clients> CreateClients(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Clnt::Client>>> clients = 0) {
  ClientsBuilder builder_(_fbb);
  builder_.add_clients(clients);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Clients> CreateClientsDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<::flatbuffers::Offset<Clnt::Client>> *clients = nullptr) {
  auto clients__ = clients ? _fbb.CreateVectorOfSortedTables<Clnt::Client>(clients) : 0;
  return Clnt::CreateClients(
      _fbb,
      clients__);
}

inline bool VerifyClient_Type(::flatbuffers::Verifier &verifier, const void *obj, Client_Type type) {
  switch (type) {
    case Client_Type_NONE: {
      return true;
    }
    case Client_Type_Person: {
      auto ptr = reinterpret_cast<const Clnt::Person *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Client_Type_Group: {
      auto ptr = reinterpret_cast<const Clnt::Group *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyClient_TypeVector(::flatbuffers::Verifier &verifier, const ::flatbuffers::Vector<::flatbuffers::Offset<void>> *values, const ::flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (::flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyClient_Type(
        verifier,  values->Get(i), types->GetEnum<Client_Type>(i))) {
      return false;
    }
  }
  return true;
}

inline const Clnt::Clients *GetClients(const void *buf) {
  return ::flatbuffers::GetRoot<Clnt::Clients>(buf);
}

inline const Clnt::Clients *GetSizePrefixedClients(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Clnt::Clients>(buf);
}

inline bool VerifyClientsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Clnt::Clients>(nullptr);
}

inline bool VerifySizePrefixedClientsBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Clnt::Clients>(nullptr);
}

inline void FinishClientsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Clnt::Clients> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedClientsBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Clnt::Clients> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Clnt

#endif  // FLATBUFFERS_GENERATED_CLIENTDATA_CLNT_H_
